/*
 * Originally from:  https://github.com/hijonathan/google-scripts/blob/master/gmail-no-response.js
 *
 * This script goes through your Gmail Inbox looking for emails labeled as SCHEDULER_NORESPONSE_LABEL + "/" + time indicator.  Examples:
 * No Response/in 7 days
 * No Response/1 month
 * No Response/after 2 days
 * The time periods should be nested under the main label.
 *
 * Emails found with no response by the indicated time period will be 1) labeled with the SCHEDULER_NORESPONSE_LABEL value, timer label removed, marked unread, and moved to the inbox.
 *
 */

function processUnresponded(event) {

    var timerLabelNames = [],
        lastRun;

    if (event != undefined) { // new run   
        lastRun = handleTriggered(event.triggerUid);
        timerLabelNames = [ lastRun.labelName ];
        Logger.log("Continuation run of label: " + lastRun.labelName + " - before epoch: " + lastRun.epoch);
    } 
    else {
        // skip labels marked as error
        timerLabelNames = getUserChildLabelNames(SCHEDULER_NORESPONSE_LABEL).remove(new RegExp("\/"+TIMER_ERROR_PREFIX));
    }

    for each(var timerLabelName in timerLabelNames) {

        Logger.log('Processing label: ' + timerLabelName);

        // Define all the filters.
        var filters = [
            'label:' + timerLabelName,
            'is:sent',
            'from:me',
            '-in:chats',
            '(-subject:"unsubscribe" AND -"This message was automatically generated by Gmail.")'
        ];

        if (lastRun != undefined) { // continuation run   
            filters.push('before:' + lastRun.epoch);
        }

        var threads = GmailApp.search(filters.join(' '), 0, PAGE_SIZE),
            threadMessages = GmailApp.getMessagesForThreads(threads),
            unrespondedThreads = [];

        var timerSugar = timerLabelName.split(/\//).pop();
      
        try {            

            Logger.log('Processing ' + threads.length + ' threads.');

            // Filter threads where I was the last respondent.
            threadMessages.forEach(function(messages, i) {

                var thread = threads[i],
                    lastMessage = messages[messages.length - 1],
                    lastFrom = lastMessage.getFrom(),
                    lastTo = lastMessage.getTo(), // I don't want to hear about it when I am sender and receiver
                    lastMessageDate = lastMessage.getDate();

                var notifyDate = lastMessageDate.get(timerSugar);

                if (notifyDate.toString() == "Invalid Date" || notifyDate.is(lastMessageDate)) {
                    throw "Error processing label: " + timerSugar + ". Messages for this label are not being processed.";
                }

                Logger.log(notifyDate.toString());

                if (isMe(lastFrom) && !isMe(lastTo) && notifyDate.isPast()) {
                    unrespondedThreads.push(thread);
                }

            });

            // Mark unresponded in bulk.
            markUnresponded(unrespondedThreads, timerLabelName);
            Logger.log('Updated ' + unrespondedThreads.length + ' messages.');

            // Resume again in RESUME_FREQUENCY minutes if max results returned (so we can come back later and get more)
            if (threads.length == PAGE_SIZE) {
                var lastThreadLastMessageEpoch = threadMessages[threadMessages.length - 1].getLastMessageDate().getTime();
                Logger.log("Scheduling follow up job...");
                var trigger = ScriptApp.newTrigger('processUnresponded')
                    .timeBased()
                    .at(new Date((new Date()).getTime() + 1000 * 60 * RESUME_FREQUENCY))
                    .create();
                setupTriggerArguments(trigger, { "labelName": timerLabelName, "epoch": lastThreadLastMessageEpoch }, false);
            }

        } catch (ex) {

            console.error(ex);
            Logger.log('Notify user and renaming label with error: ' + timerLabelName);

            GmailApp.sendEmail(getActiveUserEmail(), SCHEDULER_LABEL, ex);                      

            // can't actually rename a label so we have to add the new one and delete the old one from the threads
            var errLabelName = timerLabelName.replace(timerSugar, TIMER_ERROR_PREFIX + timerSugar)

            getLabel(errLabelName).addToThreads(threads);
            var timerLabel = getLabel(timerLabelName);
            timerLabel.removeFromThreads(threads);

            // mark them unread so they'll stand out
            GmailApp.markThreadsUnread(threads);    

            // if there are no more messages with the bad label, go ahead and delete it for cleanup
            if (timerLabel.getThreads(0, 1).length == 0) {
                Logger.log('Deleting label: ' + timerLabelName);
                timerLabel.deleteLabel();
            }          
        }

    }
}

function isMe(fromAddress) {
    var addresses = getEmailAddresses();
    for (i = 0; i < addresses.length; i++) {
        var address = addresses[i],
            r = RegExp(address, 'i');

        if (r.test(fromAddress)) {
            return true;
        }
    }

    return false;
}

function getEmailAddresses() {
    // Cache email addresses to cut down on API calls.
    if (!this.emails) {
        Logger.log('No cached email addresses. Fetching.');
        var me = getActiveUserEmail(),
            emails = GmailApp.getAliases();

        emails.push(me);
        this.emails = emails;
        Logger.log('Found ' + this.emails.length + ' email addresses that belong to you.');
    }
    return this.emails;
}

function markUnresponded(threads, timerLabelName) {
    var timerLabel = getLabel(timerLabelName);
    var noResponselabel = getLabel(SCHEDULER_NORESPONSE_LABEL);
    var addLabelToThreadLimit = 100;

    // addToThreads has a limit of 100 threads. Use batching.
    if (threads.length > addLabelToThreadLimit) {
        for (var i = 0; i < Math.ceil(threads.length / addLabelToThreadLimit); i++) {
            pageOfThreads = threads.slice(100 * i, 100 * (i + 1));
            noResponselabel.addToThreads(pageOfThreads);
            timerLabel.removeFromThreads(pageOfThreads);
            GmailApp.moveThreadsToInbox(pageOfThreads);
            GmailApp.markThreadsUnread(pageOfThreads);

        }
    } else {
        noResponselabel.addToThreads(threads);
        timerLabel.removeFromThreads(threads);
        GmailApp.moveThreadsToInbox(threads);
        GmailApp.markThreadsUnread(threads);
    }
}

function getLabel(labelName) {
    // Cache the labels.
    this.labels = this.labels || {};
    label = this.labels[labelName];

    if (!label) {
        Logger.log('Could not find cached label "' + labelName + '". Fetching.', this.labels);

        var label = GmailApp.getUserLabelByName(labelName);

        if (label) {
            Logger.log('Label exists.');
        } else {
            Logger.log('Label does not exist. Creating it.');
            label = GmailApp.createLabel(labelName);
        }
        this.labels[labelName] = label;
    }
    return label;
}